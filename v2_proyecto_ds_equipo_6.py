# -*- coding: utf-8 -*-
"""V2_Proyecto DS Equipo 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iiXqWxrXSFnB8qrI6ddd_7xNqoaPxI4t
"""

pip install pokebase

import json
import pandas as pd
import pokebase as pb
import requests
import numpy as np
from requests import get
from bs4 import BeautifulSoup
import re
from datetime import datetime

#Pedimos el número total de pokemonos
number = requests.get('https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0')
number = number.json()
n=number['count']
n

#Pedimos el número total de generaciones
number2 =requests.get('https://pokeapi.co/api/v2/generation')
number2 = number2.json()
n2=number2['count']
n2

#Una opción para obtener los pokemons https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0
#Otra https://pokeapi.co/api/v2/generation/1
#Por número https://pokeapi.co/api/v2/pokemon-species/2
link='https://pokeapi.co/api/v2/'

#Obtener los movimientos de los pokemon
ind2 = requests.get(link+'pokemon/'+str(800))
ind2 = ind2.json()
str(ind2['moves'][0]['move']['name'])

from pandas.core.indexes.extension import Index
class get_pokemon:

  def __init__(self, numero):
    ind = requests.get(link+'pokemon-species/'+str(numero+1)+'/')
    ind2 = requests.get(link+'pokemon/'+str(numero+1))
    ind = ind.json()
    ind2 = ind2.json()
    self.id= ind['id']
    self.name= ind['name']
    self.gen= ind['generation']['name']
    self.type=listas(ind2, 'types', 'type', 'name')
    self.abilities=listas(ind2,'abilities', 'ability', 'name')
    self.capture_rate=ind['capture_rate']
    self.base_happiness=ind['base_happiness']
    self.version_debut=''
    self.moves=ind2['moves'][0]['move']['name']
    self.attack=ind2['stats'][1]['base_stat']
    self.defense=ind2['stats'][2]['base_stat']
    self.hp=ind2['stats'][0]['base_stat']
    self.sp_attack=ind2['stats'][3]['base_stat']
    self.sp_defense=ind2['stats'][4]['base_stat']
    self.speed=ind2['stats'][5]['base_stat']

    if str(ind2['moves'])=='[]':
      self.moves= np.nan
    else:
      self.moves=ind2['moves'][0]['move']['name']


    #Obtenemos la clase de pokemon
    if ind['is_baby']==True:
      self.clase='Baby'
    elif ind['is_legendary']==True:
      self.clase='Legendary'
    elif ind['is_mythical']==True:
      self.clase='Mythical'
    else:
      self.clase='Común'

def listas(dataf, name, dato, dato2):
  k=dataf[name]
  lista=[]
  if dato2!=True:
    for i in range(len(k)):
      lista.append(k[i][dato][dato2])
  else:
    for i in range(len(k)):
      lista.append(k[i][dato])
  if len(lista)==1:
    lista.append('')
    return lista[0]
  else:
    lista=sorted(lista)
    return lista

data=[]
for i in range(898):
  datos={}
  pokemon=get_pokemon(i)
  datos['ID']=pokemon.id
  datos['Gen']=pokemon.gen
  datos['Name']=pokemon.name
  datos['Type']=pokemon.type
  data.append(datos)
  if i%100==0:
    print(i)

"""# Tabla de Pokémon

Crea tabla para regiones(para agregar las regiones)
"""

#Se creo esta tabla para agregar las regiones de acuerdo a las 8 generaciones.  #--copia inicio
G1=[1,'kanto']
G2=[2,'johto']
G3=[3,'hoenn']
G4=[4,'sinnoh']
G5=[5,'unova']
G6=[6,'kalos']
G7=[7,'alola']
G8=[8,'galar']

lista_reg=[G1,G2,G3,G4,G5,G6,G7]
df_region=pd.DataFrame(lista_reg,columns=['Gen','Region'])
# copia final

generaciones={'generation-i':1, 'generation-ii':2, 'generation-iii':3, 'generation-iv':4,
       'generation-v':5, 'generation-vi':6, 'generation-vii':7,
       'generation-viii':8}

tabla1=pd.DataFrame(data)
tabla1['Gen'].replace(generaciones, inplace= True)
tabla1

new1 = tabla1.set_index('ID')

new1.to_csv('tabla_de_pokemon')

"""# Tabla Características

Se van a juntar la tabla de caracteristicas y de region para generar la Tabla de caracteristicas que ocupamos con el dato de region.
"""

data1=[]
for i in range(898):
  datos1={}
  pokemon=get_pokemon(i)
  datos1['ID']=pokemon.id
  datos1['Clase']=pokemon.clase
  datos1['TasaDeCaptura']=pokemon.capture_rate
  datos1['Felicidad']=pokemon.base_happiness
  datos1['Habilidades']=pokemon.abilities
  datos1['Gen']=pokemon.gen #--copia
  data1.append(datos1)
  if i%100==0:
    print(i)
tabla2=pd.DataFrame(data1)
tabla2['Gen'].replace(generaciones, inplace= True) #copia
tabla2_p1=pd.merge(tabla2 ,df_region, on='Gen')#copia
#tabla2_final=tabla2_n.drop(['Gen'],axis=1)#copia
#copia (solo para visualizar la tabla)

"""# WebScraping para tabla de características"""

url="https://press.pokemon.com/en/Items/Schedule/Video-Game?types=2"

response=get(url)
mysoup=BeautifulSoup(response.text,'html.parser')

mysoup.find('p')
mysoup.find('div')
mysoup.find(id='p')
tabla=mysoup.find_all("div",class_="tableScheduleContainer")
tabla_pok=mysoup.find("div",id="footerBg")
tabla_pok=mysoup.find("div",class_="tableScheduleContainer")
tabla_pok=str(tabla_pok)
tabla_pok

tabla_pok=re.sub(r'<.*?>',lambda g:g.group(0).upper(),tabla_pok)

df=pd.read_html(tabla_pok)[0]

tabla_fechas=df.drop([19],axis=0)

tabla_fechas.insert(3,"Gen",[8,8,8,8,8,8,8,7,7,7,6,5,5,4,4,4,2,2,1])
new_table=tabla_fechas.drop(["Product","Available Platforms"],axis=1)
new_table.loc[19]=[ 'November 11,2022',3]

new_table=new_table.drop([1, 2, 3,4,5,7,8,11,13,14,16],axis=0)
new_table

"""Funcionamos ambas tablas"""

tabla2_final=pd.merge(tabla2_p1 ,new_table, on='Gen')
tabla2_final=tabla2_final.drop(['Gen'],axis=1)

new2 = tabla2_final.set_index('ID')
new2

new2.to_csv('tabla_caractiristicas')

tabla2.info()



"""# Tabla Estadísticas"""

data2=[]
for i in range(898):
  datos2={}
  pokemon=get_pokemon(i)
  datos2['ID']=pokemon.id
  datos2['Movimiento']=pokemon.moves
  datos2['Ataque']=pokemon.attack
  datos2['Defensa']=pokemon.defense
  datos2['HP']=pokemon.hp
  datos2['Ataque_especial']=pokemon.sp_attack
  datos2['Defensa_especial']=pokemon.sp_defense
  datos2['Velocidad']=pokemon.speed
  data2.append(datos2)
  if i%100==0:
    print(i)

tabla3=pd.DataFrame(data2)
tabla3

new3 = tabla3.set_index('ID')
new3

new3.to_csv('tabla_estadistica')

tabla3.info()